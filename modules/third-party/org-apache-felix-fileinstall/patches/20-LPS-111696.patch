diff --git a/org/apache/felix/fileinstall/internal/Artifact.java b/org/apache/felix/fileinstall/internal/Artifact.java
index 61af4f4..df2f24e 100644
--- a/org/apache/felix/fileinstall/internal/Artifact.java
+++ b/org/apache/felix/fileinstall/internal/Artifact.java
@@ -1,10 +1,10 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
+ * distributed with work for additional information
+ * regarding copyright ownership.  The ASF licenses file
  * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
+ * "License"); you may not use file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
@@ -16,9 +16,11 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.fileinstall.internal;
 
 import java.io.File;
+
 import java.net.URL;
 
 import org.apache.felix.fileinstall.ArtifactListener;
@@ -26,95 +28,80 @@ import org.apache.felix.fileinstall.ArtifactListener;
 /**
  * An artifact that has been dropped into one watched directory.
  */
-public class Artifact
-{
-
-    private File path;
-    private File jaredDirectory;
-    private URL jaredUrl;
-    private ArtifactListener listener;
-    private URL transformedUrl;
-    private File transformed;
-    private long bundleId = -1;
-    private long checksum;
-
-    public File getPath()
-    {
-        return path;
-    }
-
-    public void setPath(File path)
-    {
-        this.path = path;
-    }
-
-    public File getJaredDirectory()
-    {
-        return jaredDirectory;
-    }
-
-    public void setJaredDirectory(File jaredDirectory)
-    {
-        this.jaredDirectory = jaredDirectory;
-    }
-
-    public URL getJaredUrl()
-    {
-        return jaredUrl;
-    }
-
-    public void setJaredUrl(URL jaredUrl)
-    {
-        this.jaredUrl = jaredUrl;
-    }
-
-    public ArtifactListener getListener()
-    {
-        return listener;
-    }
-
-    public void setListener(ArtifactListener listener)
-    {
-        this.listener = listener;
-    }
-
-    public File getTransformed()
-    {
-        return transformed;
-    }
-
-    public void setTransformed(File transformed)
-    {
-        this.transformed = transformed;
-    }
-
-    public URL getTransformedUrl()
-    {
-        return transformedUrl;
-    }
-
-    public void setTransformedUrl(URL transformedUrl)
-    {
-        this.transformedUrl = transformedUrl;
-    }
-
-    public long getBundleId()
-    {
-        return bundleId;
-    }
-
-    public void setBundleId(long bundleId)
-    {
-        this.bundleId = bundleId;
-    }
-
-    public long getChecksum()
-    {
-        return checksum;
-    }
-
-    public void setChecksum(long checksum)
-    {
-        this.checksum = checksum;
-    }
+public class Artifact {
+
+	public long getBundleId() {
+		return _bundleId;
+	}
+
+	public long getChecksum() {
+		return _checksum;
+	}
+
+	public File getJaredDirectory() {
+		return _jaredDirectory;
+	}
+
+	public URL getJaredUrl() {
+		return _jaredUrl;
+	}
+
+	public ArtifactListener getListener() {
+		return _artifactListener;
+	}
+
+	public File getPath() {
+		return _path;
+	}
+
+	public File getTransformed() {
+		return _transformed;
+	}
+
+	public URL getTransformedUrl() {
+		return _transformedURL;
+	}
+
+	public void setBundleId(long bundleId) {
+		_bundleId = bundleId;
+	}
+
+	public void setChecksum(long checksum) {
+		_checksum = checksum;
+	}
+
+	public void setJaredDirectory(File jaredDirectory) {
+		_jaredDirectory = jaredDirectory;
+	}
+
+	public void setJaredUrl(URL jaredUrl) {
+		_jaredUrl = jaredUrl;
+	}
+
+	public void setListener(ArtifactListener listener) {
+		_artifactListener = listener;
+	}
+
+	public void setPath(File path) {
+		_path = path;
+	}
+
+	public void setTransformed(File transformed) {
+		_transformed = transformed;
+	}
+
+	public void setTransformedUrl(URL transformedUrl) {
+		_transformedURL = transformedUrl;
+	}
+
+	private ArtifactListener _artifactListener;
+	private long _bundleId = -1;
+	private long _checksum;
+	private File _jaredDirectory;
+	private URL _jaredUrl;
+	private File _path;
+	private File _transformed;
+	private URL _transformedURL;
+
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/internal/JarDirUrlHandler.java b/org/apache/felix/fileinstall/internal/JarDirUrlHandler.java
index 67a5e94..eef8344 100644
--- a/org/apache/felix/fileinstall/internal/JarDirUrlHandler.java
+++ b/org/apache/felix/fileinstall/internal/JarDirUrlHandler.java
@@ -1,5 +1,4 @@
 /**
- *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.felix.fileinstall.internal;
 
 import java.io.File;
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.PipedInputStream;
 import java.io.PipedOutputStream;
+
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
@@ -31,75 +32,91 @@ import org.osgi.service.url.AbstractURLStreamHandlerService;
 /**
  * A URL handler that can jar a directory on the fly
  */
-public class JarDirUrlHandler extends AbstractURLStreamHandlerService
-{
-
-    public static final String PROTOCOL = "jardir";
-
-    private static final String SYNTAX = PROTOCOL + ": file";
-
-    /**
-     * Open the connection for the given URL.
-     *
-     * @param url the url from which to open a connection.
-     * @return a connection on the specified URL.
-     * @throws java.io.IOException if an error occurs or if the URL is malformed.
-     */
-	public URLConnection openConnection(URL url) throws IOException
-    {
-		if (url.getPath() == null || url.getPath().trim().length() == 0)
-        {
-			throw new MalformedURLException("Path can not be null or empty. Syntax: " + SYNTAX );
+public class JarDirUrlHandler extends AbstractURLStreamHandlerService {
+
+	public static final String PROTOCOL = "jardir";
+
+	/**
+	 * Open the connection for the given URL.
+	 *
+	 * @param url the url from which to open a connection.
+	 * @return a connection on the specified URL.
+	 * @throws IOException if an error occurs or if the URL is malformed.
+	 */
+	@Override
+	public URLConnection openConnection(URL url) throws IOException {
+		String path = url.getPath();
+
+		if (path == null) {
+			throw new MalformedURLException(
+				"Path can not be null. Syntax: " + _SYNTAX);
+		}
+
+		path = path.trim();
+
+		if (path.length() == 0) {
+			throw new MalformedURLException(
+				"Path can not be empty. Syntax: " + _SYNTAX);
 		}
+
 		return new Connection(url);
 	}
 
-    public class Connection extends URLConnection
-    {
-
-        public Connection(URL url)
-        {
-            super(url);
-        }
-
-        public void connect() throws IOException
-        {
-        }
-
-        public InputStream getInputStream() throws IOException
-        {
-            try
-            {
-                final PipedOutputStream pos = new PipedOutputStream();
-                final PipedInputStream pis = new PipedInputStream(pos);
-                new Thread()
-                {
-                    public void run()
-                    {
-                        try
-                        {
-                            Util.jarDir(new File(getURL().getPath()), pos);
-                        }
-                        catch (IOException e)
-                        {
-                            try
-                            {
-                                pos.close();
-                            }
-                            catch (IOException e2)
-                            {
-                                // Ignore
-                            }
-                        }
-                    }
-                }.start();
-                return pis;
-            }
-            catch (Exception e)
-            {
-                throw (IOException) new IOException("Error opening spring xml url").initCause(e);
-            }
-        }
-    }
+	public class Connection extends URLConnection {
+
+		public Connection(URL url) {
+			super(url);
+		}
+
+		@Override
+		public void connect() throws IOException {
+		}
+
+		@Override
+		public InputStream getInputStream() throws IOException {
+			try {
+				PipedOutputStream pipedOutputStream = new PipedOutputStream();
+
+				InputStream inputStream = new PipedInputStream(
+					pipedOutputStream);
+
+				Thread thread = new Thread() {
+
+					@Override
+					public void run() {
+						URL url = getURL();
+
+						try {
+							Util.jarDir(
+								new File(url.getPath()), pipedOutputStream);
+						}
+						catch (IOException ioException1) {
+							try {
+								pipedOutputStream.close();
+							}
+							catch (IOException ioException2) {
+
+								// Ignore
+
+							}
+						}
+					}
+
+				};
+
+				thread.start();
+
+				return inputStream;
+			}
+			catch (Exception exception) {
+				throw new IOException(
+					"Error opening spring xml url", exception);
+			}
+		}
+
+	}
+
+	private static final String _SYNTAX = PROTOCOL + ": file";
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/internal/Scanner.java b/org/apache/felix/fileinstall/internal/Scanner.java
index 5b86311..5e17e66 100644
--- a/org/apache/felix/fileinstall/internal/Scanner.java
+++ b/org/apache/felix/fileinstall/internal/Scanner.java
@@ -16,19 +16,20 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.fileinstall.internal;
 
 import java.io.Closeable;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
-import java.util.Arrays;
+
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.zip.CRC32;
 
@@ -47,217 +48,254 @@ import java.util.zip.CRC32;
  */
 public class Scanner implements Closeable {
 
-    public final static String SUBDIR_MODE_JAR = "jar";
-    public final static String SUBDIR_MODE_SKIP = "skip";
-    public final static String SUBDIR_MODE_RECURSE = "recurse";
-
-    final File directory;
-    final FilenameFilter filter;
-    final boolean jarSubdir;
-    final boolean skipSubdir;
-    final boolean recurseSubdir;
-
-    // Store checksums of files or directories
-    Map<File, Long> lastChecksums = new HashMap<File, Long>();
-    Map<File, Long> storedChecksums = new HashMap<File, Long>();
-
-    /**
-     * Create a scanner for the specified directory
-     *
-     * @param directory the directory to scan
-     */
-    public Scanner(File directory)
-    {
-        this(directory, null, null);
-    }
-
-    /**
-     * Create a scanner for the specified directory and file filter
-     *
-     * @param directory the directory to scan
-     * @param filterString a filter for file names
-     * @param subdirMode to use when scanning
-     */
-    public Scanner(File directory, final String filterString, String subdirMode)
-    {
-        this.directory = canon(directory);
-        if (filterString != null && filterString.length() > 0)
-        {
-            this.filter = new FilenameFilter()
-            {
-                Pattern pattern = Pattern.compile(filterString);
-                public boolean accept(File dir, String name)
-                {
-                    return pattern.matcher(name).matches();
-                }
-            };
-        }
-        else
-        {
-            this.filter = null;
-        }
-        this.jarSubdir = subdirMode == null || SUBDIR_MODE_JAR.equals(subdirMode);
-        this.skipSubdir = SUBDIR_MODE_SKIP.equals(subdirMode);
-        this.recurseSubdir = SUBDIR_MODE_RECURSE.equals(subdirMode);
-    }
-
-    /**
-     * Initialize the list of known files.
-     * This should be called before the first scan to initialize
-     * the list of known files.  The purpose is to be able to detect
-     * files that have been deleted while the scanner was inactive.
-     *
-     * @param checksums a map of checksums
-     */
-    public void initialize(Map<File, Long> checksums)
-    {
-        storedChecksums.putAll(checksums);
-    }
-
-    /**
-     * Report a set of new, modified or deleted files.
-     * Modifications are checked against a computed checksum on some file
-     * attributes to detect any modification.
-     * Upon restart, such checksums are not known so that all files will
-     * be reported as modified. 
-     *
-     * @param reportImmediately report all files immediately without waiting for the checksum to be stable
-     * @return a list of changes on the files included in the directory
-     */
-    public Set<File> scan(boolean reportImmediately)
-    {
-        File[] list = directory.listFiles(filter);
-        Set<File> files = processFiles(reportImmediately, list);
-        return new TreeSet<>(files);
-    }
-
-    private Set<File> processFiles(boolean reportImmediately, File[] list)
-    {
-        if (list == null)
-        {
-            return new HashSet<>();
-        }
-        Set<File> files = new HashSet<File>();
-        Set<File> removed = new HashSet<File>(storedChecksums.keySet());
-        for (File file : list)
-        {
-            if (file.isDirectory())
-            {
-                if (skipSubdir)
-                {
-                    continue;
-                } 
-                else if (recurseSubdir)
-                {
-                    files.addAll(processFiles(reportImmediately, file.listFiles(filter)));
-                    continue;
-                }
-            }
-            long lastChecksum = lastChecksums.get(file) != null ? (Long) lastChecksums.get(file) : 0;
-            long storedChecksum = storedChecksums.get(file) != null ? (Long) storedChecksums.get(file) : 0;
-            long newChecksum = checksum(file);
-            lastChecksums.put(file, newChecksum);
-            // Only handle file when it does not change anymore and it has changed
-            // since last reported
-            if ((newChecksum == lastChecksum || reportImmediately) && newChecksum != storedChecksum)
-            {
-                storedChecksums.put(file, newChecksum);
-                files.add(file);
-            }
-            removed.remove(file);
-        }
-        // Make sure we'll handle a file that has been deleted
-        files.addAll(removed);
-        for (File file : removed)
-        {
-            // Remove no longer used checksums
-            lastChecksums.remove(file);
-            storedChecksums.remove(file);
-        }
-        return files;
-    }
-
-    public void close() throws IOException {
-    }
-
-    private static File canon(File file)
-    {
-        try
-        {
-            return file.getCanonicalFile();
-        }
-        catch (IOException e)
-        {
-            return file;
-        }
-    }
-
-    /**
-     * Retrieve the previously computed checksum for a give file.
-     *
-     * @param file the file to retrieve the checksum
-     * @return the checksum
-     */
-    public long getChecksum(File file)
-    {
-        Long c = storedChecksums.get(file);
-        return c != null ? c : 0;
-    }
-
-    /**
-      * Update the checksum of a file if that file is already known locally.
-      */
-    public void updateChecksum(File file)
-    {
-        if (file != null && storedChecksums.containsKey(file))
-        {
-            long newChecksum = checksum(file);
-            storedChecksums.put(file, newChecksum);
-        }
-    }
-
-    /**
-     * Compute a cheksum for the file or directory that consists of the name, length and the last modified date
-     * for a file and its children in case of a directory
-     *
-     * @param file the file or directory
-     * @return a checksum identifying any change
-     */
-    static long checksum(File file)
-    {
-        CRC32 crc = new CRC32();
-        checksum(file, crc);
-        return crc.getValue();
-    }
-
-    private static void checksum(File file, CRC32 crc)
-    {
-        crc.update(file.getName().getBytes());
-        if (file.isFile())
-        {
-            checksum(file.lastModified(), crc);
-            checksum(file.length(), crc);
-        }
-        else if (file.isDirectory())
-        {
-            File[] children = file.listFiles();
-            if (children != null)
-            {
-                for (File aChildren : children)
-                {
-                    checksum(aChildren, crc);
-                }
-            }
-        }
-    }
-
-    private static void checksum(long l, CRC32 crc)
-    {
-        for (int i = 0; i < 8; i++)
-        {
-            crc.update((int) (l & 0x000000ff));
-            l >>= 8;
-        }
-    }
+	public static final String SUBDIR_MODE_JAR = "jar";
+
+	public static final String SUBDIR_MODE_RECURSE = "recurse";
+
+	public static final String SUBDIR_MODE_SKIP = "skip";
+
+	/**
+	 * Create a scanner for the specified directory
+	 *
+	 * @param directory the directory to scan
+	 */
+	public Scanner(File directory) {
+		this(directory, null, null);
+	}
+
+	/**
+	 * Create a scanner for the specified directory and file filter
+	 *
+	 * @param directory the directory to scan
+	 * @param filterString a filter for file names
+	 * @param subdirMode to use when scanning
+	 */
+	public Scanner(
+		File directory, final String filterString, String subdirMode) {
+
+		watchedDirectory = _canon(directory);
+
+		if ((filterString != null) && (filterString.length() > 0)) {
+			_filter = new FilenameFilter() {
+
+				@Override
+				public boolean accept(File dir, String name) {
+					Matcher matcher = _pattern.matcher(name);
+
+					return matcher.matches();
+				}
+
+				private final Pattern _pattern = Pattern.compile(
+					filterString);
+
+			};
+		}
+		else {
+			_filter = null;
+		}
+
+		if ((subdirMode == null) || SUBDIR_MODE_JAR.equals(subdirMode)) {
+			jarSubdir = true;
+		}
+		else {
+			jarSubdir = false;
+		}
+
+		skipSubdir = SUBDIR_MODE_SKIP.equals(subdirMode);
+		_recurseSubdir = SUBDIR_MODE_RECURSE.equals(subdirMode);
+	}
+
+	@Override
+	public void close() throws IOException {
+	}
+
+	/**
+	 * Retrieve the previously computed checksum for a give file.
+	 *
+	 * @param file the file to retrieve the checksum
+	 * @return the checksum
+	 */
+	public long getChecksum(File file) {
+		Long checksum = storedChecksums.get(file);
+
+		if (checksum != null) {
+			return checksum;
+		}
+
+		return 0;
+	}
+
+	/**
+	 * Initialize the list of known files.
+	 * This should be called before the first scan to initialize
+	 * the list of known files.  The purpose is to be able to detect
+	 * files that have been deleted while the scanner was inactive.
+	 *
+	 * @param checksums a map of checksums
+	 */
+	public void initialize(Map<File, Long> checksums) {
+		storedChecksums.putAll(checksums);
+	}
+
+	// Store checksums of files or directories
+
+	/**
+	 * Report a set of new, modified or deleted files.
+	 * Modifications are checked against a computed checksum on some file
+	 * attributes to detect any modification.
+	 * Upon restart, such checksums are not known so that all files will
+	 * be reported as modified.
+	 *
+	 * @param reportImmediately report all files immediately without waiting for the checksum to be stable
+	 * @return a list of changes on the files included in the directory
+	 */
+	public Set<File> scan(boolean reportImmediately) {
+		File[] list = watchedDirectory.listFiles(_filter);
+
+		Set<File> files = _processFiles(reportImmediately, list);
+
+		return new TreeSet<>(files);
+	}
+
+	/**
+	 * Update the checksum of a file if that file is already known locally.
+	 */
+	public void updateChecksum(File file) {
+		if ((file != null) && storedChecksums.containsKey(file)) {
+			long newChecksum = checksum(file);
+
+			storedChecksums.put(file, newChecksum);
+		}
+	}
+
+	/**
+	 * Compute a cheksum for the file or directory that consists of the name,
+	 * length and the last modified date
+	 * for a file and its children in case of a directory
+	 *
+	 * @param file the file or directory
+	 * @return a checksum identifying any change
+	 */
+	protected static long checksum(File file) {
+		CRC32 crc32 = new CRC32();
+
+		_checksum(file, crc32);
+
+		return crc32.getValue();
+	}
+
+	protected final boolean jarSubdir;
+	protected final Map<File, Long> lastChecksums = new HashMap<>();
+	protected final boolean skipSubdir;
+	protected final Map<File, Long> storedChecksums = new HashMap<>();
+	protected final File watchedDirectory;
+
+	private static File _canon(File file) {
+		try {
+			return file.getCanonicalFile();
+		}
+		catch (IOException ioException) {
+			return file;
+		}
+	}
+
+	private static void _checksum(File file, CRC32 crc32) {
+		String name = file.getName();
+
+		crc32.update(name.getBytes());
+
+		if (file.isFile()) {
+			_checksum(file.lastModified(), crc32);
+			_checksum(file.length(), crc32);
+		}
+		else if (file.isDirectory()) {
+			File[] children = file.listFiles();
+
+			if (children != null) {
+				for (File child : children) {
+					_checksum(child, crc32);
+				}
+			}
+		}
+	}
+
+	private static void _checksum(long l, CRC32 crc32) {
+		for (int i = 0; i < 8; i++) {
+			crc32.update((int)(l & 0x000000ff));
+
+			l >>= 8;
+		}
+	}
+
+	private Set<File> _processFiles(boolean reportImmediately, File[] list) {
+		if (list == null) {
+			return new HashSet<>();
+		}
+
+		Set<File> files = new HashSet<>();
+
+		Set<File> removed = new HashSet<>(storedChecksums.keySet());
+
+		for (File file : list) {
+			if (file.isDirectory()) {
+				if (skipSubdir) {
+					continue;
+				}
+				else if (_recurseSubdir) {
+					files.addAll(
+						_processFiles(
+							reportImmediately, file.listFiles(_filter)));
+
+					continue;
+				}
+			}
+
+			long lastChecksum = 0;
+
+			if (lastChecksums.get(file) != null) {
+				lastChecksum = lastChecksums.get(file);
+			}
+
+			long storedChecksum = 0;
+
+			if (storedChecksums.get(file) != null) {
+				storedChecksum = storedChecksums.get(file);
+			}
+
+			long newChecksum = checksum(file);
+
+			lastChecksums.put(file, newChecksum);
+
+			// Only handle file when it does not change anymore and it has
+			// changed since last reported
+
+			if (((newChecksum == lastChecksum) || reportImmediately) &&
+				(newChecksum != storedChecksum)) {
+
+				storedChecksums.put(file, newChecksum);
+				files.add(file);
+			}
+
+			removed.remove(file);
+		}
+
+		// Make sure we'll handle a file that has been deleted
+
+		files.addAll(removed);
+
+		for (File file : removed) {
+
+			// Remove no longer used checksums
+
+			lastChecksums.remove(file);
+			storedChecksums.remove(file);
+		}
+
+		return files;
+	}
+
+	private final FilenameFilter _filter;
+	private final boolean _recurseSubdir;
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/internal/Watcher.java b/org/apache/felix/fileinstall/internal/Watcher.java
index b6de977..e96dfa9 100644
--- a/org/apache/felix/fileinstall/internal/Watcher.java
+++ b/org/apache/felix/fileinstall/internal/Watcher.java
@@ -322,3 +322,4 @@ public abstract class Watcher implements Closeable {
     protected abstract void process(Path path);
     protected abstract void onRemove(Path path);
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/internal/WatcherScanner.java b/org/apache/felix/fileinstall/internal/WatcherScanner.java
index 7277820..02be57e 100644
--- a/org/apache/felix/fileinstall/internal/WatcherScanner.java
+++ b/org/apache/felix/fileinstall/internal/WatcherScanner.java
@@ -54,7 +54,7 @@ public class WatcherScanner extends Scanner {
         }
         this.watcher = new ScannerWatcher();
         this.watcher.setFileMatcher(fileMatcher);
-        this.watcher.setRootDirectory(this.directory);
+        this.watcher.setRootDirectory(this.watchedDirectory);
         this.watcher.init();
         this.watcher.rescan();
     }
@@ -117,7 +117,7 @@ public class WatcherScanner extends Scanner {
         @Override
         protected void process(Path path) {
             File file = path.toFile();
-            if (!file.getParentFile().equals(directory)) {
+            if (!file.getParentFile().equals(watchedDirectory)) {
               // File is in a sub directory.
               if (skipSubdir) {
                 return;
@@ -131,7 +131,7 @@ public class WatcherScanner extends Scanner {
                     // Should not happen.
                     return;
                   }
-                } while (!file.getParentFile().equals(directory));
+                } while (!file.getParentFile().equals(watchedDirectory));
               }
               // Otherwise we recurse by adding the file as-is.
             }
@@ -163,3 +163,4 @@ public class WatcherScanner extends Scanner {
     }
 
 }
+/* @generated */
\ No newline at end of file
