@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Item Selector";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			Depot.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This makes sure that an image can be uploaded via URL."
	@priority = "5"
	test AddBlogsImageViaURL {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ItemSelector#AddBlogsImageViaURL";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.addImageFromURL(
			imageSourceURL = "http://localhost:8080/webdav/guest/document_library/Document_2.jpg",
			navTab = "URL");

		Pause(locator1 = "1000");

		PortletEntry.publish();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewInlineImage(uploadFileName = "Document_2.jpg");
	}

	@description = "This ensures that the SVG image can be added to a fragment background."
	@priority = "5"
	test AddSVGImageToFragmentBackground {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Direct",
			entryTitle = "Document_1.svg",
			navItem = "Documents and Media",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.clickPublish();

		Navigator.gotoPage(pageName = "Test Content Page Name");

		AssertElementPresent(
			key_imageName = "Document_1.svg",
			locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
	}

	@description = "This test covers LPS-105188. It ensures that a user can change selected page for Navigation Menu item based on page after creation."
	@priority = "4"
	test ChangeSelectedPageNavigationMenu {
		JSONGroup.addGroup(groupName = "Test Site Name");

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name ${i}");
		}

		NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

		NavigationMenusAdmin.addMenu(menuName = "Navigation Menu Name");

		NavigationMenusAdmin.addItem(
			item = "Page",
			pageNames = "Test Page Name 1");

		NavigationMenusAdmin.editItem(
			item = "Page",
			itemName = "Test Page Name 1",
			pageNames = "Test Page Name 2");

		NavigationMenusAdmin.viewItem(itemName = "Test Page Name 2");
	}

	@description = "This test covers LPS-119899, It ensures that the search results can clear after filtering everywhere in the item selector."
	@priority = "4"
	test ClearFilterResults {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "Web Content From Depot");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		Click(locator1 = "Button#SELECT_FIELD_LAST");

		ItemSelector.viewWCEverywhereFilterResults(webContentTitle = "Web Content From Depot,WC WebContent From Site");

		ItemSelector.clearFilterResults(
			currentSiteWebContentTitle = "WC WebContent From Site",
			webContentTitle = "Web Content From Depot");
	}

	@description = "This test ensures that documents can filter by the current site in the item selector."
	@priority = "5"
	test FilterByCurrentSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.viewCurrentSiteFilterResults(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			noImageFileName = "Document_1.jpg",
			viewNoLocationInfo = "Site Name");
	}

	@description = "This test ensures that web contents can filter by the current site in the item selector."
	@priority = "5"
	test FilterWCByCurrentSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "Web Content From Depot");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Site",
			groupName = "Site Name",
			title = "Web Content From Site");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertClick(
			locator1 = "WCDConfiguration#SELECT_WEB_CONTENT_BUTTON",
			value1 = "Select");

		Pause(locator1 = "3000");

		SelectFrame.selectSecondFrame(locator1 = "IFrame#MODAL_BODY");

		ItemSelector.viewWCCurrentSiteFilterResults(
			noWebContentTitle = "Web Content From Depot",
			viewNoLocationInfo = "Site Name",
			webContentTitle = "Web Content From Site");
	}

	@description = "This ensures that the background image of a fragment can be added."
	@priority = "5"
	test FragmentSmoke {
		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpeg",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpeg");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Direct",
			entryTitle = "Document_1.jpeg",
			navItem = "Documents and Media",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		AssertElementPresent(
			key_imageName = "Document_1.jpeg",
			locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
	}

	@description = "This makes sure that the files in item selector can display by pagination."
	@priority = "4"
	test PaginateFiles {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpg,Document_2.jpg,Document_3.jpg,Document_4.jpg,Commerce_Black.jpg,Commerce_White.jpg");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		AssertClick(
			key_navTab = "Documents and Media",
			locator1 = "ItemSelector#NAVIGATION_SPECIFIC_TAB",
			value1 = "Documents and Media");

		for (var imageFileName : list "Document_1,Document_2,Document_3,Document_4,Commerce_Black,Commerce_White") {
			AssertElementPresent(
				key_imageFileName = "${imageFileName}",
				locator1 = "ItemSelector#SELECT_FILE_IMAGE_CARD");
		}

		Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");

		Pagination.changePagination(itemsPerPage = "4");

		for (var imageFileName : list "Commerce_Black,Commerce_White,Document_1,Document_2") {
			AssertElementPresent(
				key_imageFileName = "${imageFileName}",
				locator1 = "ItemSelector#SELECT_FILE_IMAGE_CARD");
		}

		for (var imageFileName : list "Document_3,Document_4") {
			AssertElementNotPresent(
				key_imageFileName = "${imageFileName}",
				locator1 = "ItemSelector#SELECT_FILE_IMAGE_CARD");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
	}

	@description = "This test covers LPS-122139. It ensures that the files in the item selector can display by pagination after scoped everywhere filter."
	@priority = "4"
	test PaginateFilesAfterScopedFilter {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		for (var documentNumber : list "_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23") {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_4.jpg",
				dmDocumentFileName = "Document${documentNumber}.jpg",
				dmDocumentTitle = "DM Document JPG${documentNumber}");
		}

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		for (var documentNumber : list "_1,_2,_3,_4,_5,_6,_7") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.jpg",
				dmDocumentFileName = "Document${documentNumber}.jpg",
				dmDocumentTitle = "DM Document JPG${documentNumber}");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		Pagination.changePagination(itemsPerPage = "40");

		Pagination.viewResults(results = "Showing 1 to 30 of 30 entries.");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 21 to 30 of 30 entries.");
	}

	@description = "This ensures that users can preview the Facebook video in item selector."
	@priority = "5"
	test PreviewFacebookVideo {
		property test.name.skip.portal.instance = "ItemSelector#PreviewFacebookVideo";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Facebook Video",
			videoURL = "https://www.facebook.com/Cristiano/videos/1710977485745946");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoAddEntry();

		ItemSelector.gotoItemSelectorViaAlloyEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			validURL = "https://www.facebook.com",
			videoShortcutTitle = "Test Facebook Video");
	}

	@description = "This ensures that a message is displayed in the preview section of the item selector when pasting an invalid URL."
	@priority = "5"
	test PreviewInvalidVideos {
		KBAdmin.openKBAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAddMenuItem(menuItem = "Basic Article");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://youtu.be/IxNczRyywXYtest");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.youtube.com/watch?v=test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://vimeo.com/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://player.vimeo.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.facebook.com/Cristiano/videos/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.facebook.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://test.com/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://test.com/test");
	}

	@description = "This ensures that users can preview the supported videos in the item selector."
	@priority = "5"
	test PreviewSupportedVideos {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoAddEntry();

		ItemSelector.gotoItemSelectorViaAlloyEditor(video = "true");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.youtube.com/watch?v=2EPZxIC5ogU");

		ItemSelector.previewEmbeddedVideo(validURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://youtu.be/IxNczRyywXY");

		ItemSelector.previewEmbeddedVideo(validURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.facebook.com/Cristiano/videos/1710977485745946");

		ItemSelector.previewEmbeddedVideo(validURL = "https://www.facebook.com");

		for (var videoSourceURL : list "https://www.twitch.tv/videos/806178790,https://www.twitch.tv/esl_csgo") {
			ItemSelector.addVideoFromURL(
				navTab = "URL",
				unpublish = "true",
				videoSourceURL = "${videoSourceURL}");

			ItemSelector.previewEmbeddedVideo(validURL = "https://player.twitch.tv");
		}

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://vimeo.com/483035084");

		ItemSelector.previewEmbeddedVideo(validURL = "https://player.vimeo.com");
	}

	@description = "This ensures that users can preview the SVG image in item selector."
	@priority = "5"
	test PreviewSVG {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.gotoPreviewViaSelectFile(navTab = "Documents and Media");

		AssertVisible(locator1 = "ItemSelector#SELECT_IMAGE_PREVIEW");
	}

	@description = "This ensures that users can preview the Twitch video in item selector."
	@priority = "5"
	test PreviewTwitchVideo {
		property test.name.skip.portal.instance = "ItemSelector#PreviewTwitchVideo";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Twitch Video",
			videoURL = "https://www.twitch.tv/videos/806178790");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		KBAdmin.openKBAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAddMenuItem(menuItem = "Basic Article");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			validURL = "https://player.twitch.tv",
			videoShortcutTitle = "Test Twitch Video");
	}

	@description = "This ensures that users can preview the Vimeo video in item selector."
	@priority = "5"
	test PreviewVimeoVideo {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Vimeo Video",
			videoURL = "https://vimeo.com/483035084");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoAddCP();

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			navTab = "Documents and Media",
			validURL = "https://player.vimeo.com",
			videoShortcutTitle = "Test Vimeo Video");
	}

	@description = "This ensures that users can preview the YouTube video in item selector."
	@priority = "5"
	test PreviewYouTubeVideo {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=2EPZxIC5ogU");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAddMenuItem(menuItem = "Basic Article");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			navTab = "Documents and Media",
			validURL = "https://www.youtube.com",
			videoShortcutTitle = "Test YouTube Video");
	}

	@description = "This test covers LPS-119709. It ensures that the blog images can not filter by the everywhere and the current site."
	@priority = "4"
	test ViewBlogsImageNoScopeFilter {
		JSONGroup.addGroup(groupName = "Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoBrowseImage();

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		for (var subheaderItem : list "Everywhere,Current Site") {
			ManagementBar.viewNoSubheaderInFilterAndOrder(subheaderItem = "${subheaderItem}");
		}
	}

	@description = "This ensures that the location info of the documents can be viewed through Blogs on a connected site."
	@priority = "5"
	test ViewDocumentsLocationInfo {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDocument.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDocument.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		for (var locationName : list "Test Depot Name,Site Name") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.gotoAddEntry();

			BlogsNavigator.gotoSelectFile();

			ItemSelector.viewLocationInfoViaBlogs(
				locationName = "${locationName}",
				navTab = "Documents and Media",
				titleList = "Document_1.jpg,Document_2.jpg,DM Folder Name");
		}
	}

	@description = "This test covers LPS-119553. It ensures that the assets in the connected site can not be filtered out after navigating to the depot through the breadcrumb."
	@priority = "4"
	test ViewFilterResultsInSpecificBreadcrumb {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		AssertClick(
			locator1 = "WCDConfiguration#SELECT_WEB_CONTENT_BUTTON",
			value1 = "Select");

		SelectFrame.selectSecondFrame(locator1 = "IFrame#MODAL_BODY");

		AssertClick(
			key_breadcrumbName = "Sites and Libraries",
			locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
			value1 = "Sites and Libraries");

		AssertClick(
			key_groupTab = "Asset Library",
			locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
			value1 = "Asset Library");

		Click(
			key_card = "Test Depot Name",
			locator1 = "Card#CARD_TITLE");

		ManagementBar.setFilterAndOrder(filterBy = "Everywhere");

		AssertElementPresent(
			key_filterScope = "Scope: Everywhere",
			locator1 = "ManagementBar#FILTER_RESULTS_SCOPE");

		AssertVisible(
			key_rowEntry = "WC WebContent From Depot",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		AssertElementNotPresent(
			key_rowEntry = "WC WebContent From Site",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		ManagementBar.setFilterAndOrder(filterBy = "Current Asset Library");

		AssertElementNotPresent(
			key_filterScope = "Scope: Current Asset Library",
			locator1 = "ManagementBar#FILTER_RESULTS_SCOPE");

		AssertVisible(
			key_rowEntry = "WC WebContent From Depot",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		AssertElementNotPresent(
			key_rowEntry = "WC WebContent From Site",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
	}

	@description = "This test covers LPS-118808. It ensures that an image in the depot folder can be viewed through everywhere filter on a connected site."
	@priority = "4"
	test ViewFolderImageViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.addCP(dmFolderName = "DM Folder Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.viewEverywhereFilterResults(
			dmFolderName = "DM Folder Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");
	}

	@description = "This test covers LPS-119707. It ensures that the web content in the depot folder can be viewed through everywhere filter on a connected site."
	@priority = "4"
	test ViewFolderWCViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addFolder(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONWebcontent.addWebContent(
			content = "Webcontent Content",
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		AssertClick(
			key_fieldFieldLabel = "Web Content",
			locator1 = "WCEditWebContent#SELECT_BUTTON",
			value1 = "Select");

		ItemSelector.viewWCEverywhereFilterResults(
			folderWebContentTitle = "WC WebContent From Depot",
			siteName = "Test Depot Name",
			viewFolderWC = "true",
			wcFolderName = "WC Folder Name",
			webContentTitle = "WC WebContent From Site");
	}

	@description = "This ensures that the video thumbnails can be viewed in Item Selector."
	@priority = "5"
	test ViewVideoThumbnailsViaWC {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Shortened URL Video",
			videoURL = "https://youtu.be/HOdbzGCI5ME");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Vimeo Video",
			videoURL = "https://vimeo.com/483035084");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.viewCardThumbnails(
			cardList = "Test YouTube Video,Test Shortened URL Video,Test Vimeo Video",
			depotName = "Test Depot Name",
			navTab = "Documents and Media");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.viewListThumbnails(
			depotName = "Test Depot Name",
			listEntry = "Test YouTube Video,Test Shortened URL Video,Test Vimeo Video",
			navTab = "Documents and Media");
	}

	@description = "It ensures that the web content draft in an Asset Library cannot be found when searching in an Item Selector in that Library."
	@priority = "4"
	test ViewWCDraftViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title",
			workflowAction = "DRAFT");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		AssertClick(
			key_fieldFieldLabel = "Web Content",
			locator1 = "WCEditWebContent#SELECT_BUTTON",
			value1 = "Select");

		ItemSelector.viewWCEverywhereFilterResults(
			draft = "true",
			webContentTitle = "WC WebContent Title");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		PortletEntry.publish(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		AssertClick(
			key_fieldFieldLabel = "Web Content",
			locator1 = "WCEditWebContent#SELECT_BUTTON",
			value1 = "Select");

		ItemSelector.viewWCEverywhereFilterResults(webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that the location info of depot web content can be viewed through WCD on a connected site."
	@priority = "5"
	test ViewWCLocationInfo {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		ItemSelector.viewLocationInfoViaWCD(
			locationName = "Test Depot Name",
			titleList = "WC WebContent From Depot");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		ItemSelector.viewLocationInfoViaWCD(
			locationName = "Site Name",
			titleList = "WC WebContent From Site");
	}

}