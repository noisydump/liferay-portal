@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Settings");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(portlet = "Staging");

		Depot.activateStaging(depotName = "Test Depot Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that the image in depot can be removed and republished in Blogs cover image when enabling local staging."
	@priority = "5"
	test DeleteBlogImageInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		Pause(locator1 = "3000");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		AlloyEditor.addContent(content = "Blogs Entry Content");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");
	}

	@description = "This ensures that the image in depot can be removed and republished in Blogs inline image when enabling local staging."
	@priority = "5"
	test DeleteBlogInlineImageInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		AlloyEditor.addContent(content = "Blogs Entry Content");

		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");
	}

	@description = "This ensures that a document in depot can be removed and republished in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	test DeleteDocumentInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document_1.doc");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_1.doc",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_1.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_1.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_1.doc");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_1.doc",
			assetType = "Document");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_assetTitle = "Document_1.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_assetTitle = "Document_1.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	@description = "This ensures that image in depot can be removed and republished in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	test DeleteImageInDepot {
		property portal.acceptance = "true";

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_2.jpg",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertTextNotPresent(
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "Document_2.jpg");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();
	}

	@description = "This ensures that video shortcut in depot can be deleted and republished in Blogs when enabling local staging."
	@priority = "4"
	test DeleteVideoShortcutInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			depotName = "Test Depot Name",
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			videoShortcutTitle = "Test YouTube Video");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Test YouTube Video");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Test YouTube Video",
			assetType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This ensures that the blog image from a depot can be edited and republished when enabling local staging."
	@priority = "5"
	test EditBlogImage {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		for (var num : list "1,2") {
			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_${num}.jpg",
				dmDocumentTitle = "Document_${num}.jpg");
		}

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		Pause(locator1 = "3000");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		AlloyEditor.addContent(content = "Blogs Entry Content");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.mouseOverPortletTitle(portletTitleName = "Blogs");

		Blogs.clickEllipsisItemPG(
			entryTitle = "Blogs Entry Title",
			item = "Edit");

		BlogsNavigator.gotoBrowseImage();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_uploadFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");
	}

	@description = "This ensures that the blog inline image from a depot can be edited and republished when enabling local staging."
	@priority = "5"
	test EditBlogInlineImage {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		for (var num : list "1,2") {
			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_${num}.jpg",
				dmDocumentTitle = "Document_${num}.jpg");
		}

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		AlloyEditor.addContent(content = "Blogs Entry Content");

		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.mouseOverPortletTitle(portletTitleName = "Blogs");

		Blogs.clickEllipsisItemPG(
			entryTitle = "Blogs Entry Title",
			item = "Edit");

		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		Button.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		AssertVisible(
			key_uploadFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_INLINE_IMAGE");
	}

	@description = "This ensures that the blog small image from a depot can be edited and republished when enabling local staging."
	@priority = "5"
	test EditBlogSmallImage {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		for (var num : list "1,2") {
			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_${num}.jpg",
				dmDocumentTitle = "Document_${num}.jpg");
		}

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addSmallImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addSmallImage(
			browseImage = "true",
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_imageFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_imageFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");
	}

	@description = "This ensures that document in depot can be replaced and republished in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	test EditDocumentInDepot {
		property portal.acceptance = "true";

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.doc",
			dmDocumentTitle = "Document_2.doc");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_2.doc",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_3.doc",
			dmDocumentTitle = "Document_2.doc",
			dmDocumentTitleEdit = "Document_3.doc");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_3.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_3.doc",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	@description = "This ensures that an image in depot can be replaced and republished in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	test EditImageInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_2.jpg",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_1.jpg",
			dmDocumentTitle = "Document_2.jpg",
			dmDocumentTitleEdit = "Document_1.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_1.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_1.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	@description = "This ensures that an edited internal video in depot can be republished on a connected staging site with enabling Xuggler."
	@priority = "4"
	test EditInternalVideoInDepot {
		property test.name.skip.portal.instance = "DepotLocalStagingDM#EditInternalVideoInDepot";

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(installXuggler = "true");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(enableXuggler = "true");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.mp4",
			dmDocumentTitle = "DM Video Title In Depot");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "DM Video Title In Depot",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		while (IsElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL", key_thumbnailName = "Document_1.mp4")) {
			Pause(locator1 = "2000");

			Refresh();
		}

		AssertVisible(
			key_thumbnailName = "Document_1.mp4",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		while (IsElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL", key_thumbnailName = "Document_1.mp4")) {
			Pause(locator1 = "3000");

			Refresh();
		}

		AssertVisible(
			key_thumbnailName = "Document_1.mp4",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.mp4",
			dmDocumentFileNameEdit = "Document_2.mp4",
			dmDocumentTitle = "DM Video Title In Depot",
			dmDocumentTitleEdit = "DM Video Title In Depot Edit");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		while (IsElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL", key_thumbnailName = "Document_2.mp4")) {
			Pause(locator1 = "2000");

			Refresh();
		}

		AssertVisible(
			key_thumbnailName = "Document_2.mp4",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		while (IsElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL", key_thumbnailName = "Document_2.mp4")) {
			Pause(locator1 = "3000");

			Refresh();
		}

		AssertVisible(
			key_thumbnailName = "Document_2.mp4",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");
	}

	@description = "This ensures that a document using a custom document type from a depot can be published in the staging site when enabling local staging."
	@priority = "5"
	test PublishDMWithDocumentType {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.addDocumentTypePG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Depot",
			textField = "DM Document Text");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Depot");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite(site = "Site Name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Depot");
	}

	@description = "This ensures that a folder with a document in depot can be published in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	test PublishDocumentFolder {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.gotoEntry(dmFolderName = "DM Folder Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document_1.doc");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "DM Folder Name",
			assetType = "Documents Folder",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetContent = "1 Document",
			assetTitle = "DM Folder Name");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_assetTitle = "DM Folder Name",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetContent = "1 Document",
			assetTitle = "DM Folder Name");
	}

	@description = "This ensures that the shortcut to an image in the depot can be added and published in the staging site when enabling local staging."
	@priority = "5"
	test PublishImageShortcut {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addDMShortcutCP(
			depotName = "Test Depot Name",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This ensures that an image with custom field in depot can be published in staging site when enabling local staging."
	@priority = "5"
	test PublishImageWithCustomField {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Custom Fields");

		CustomFields.addCP(
			customFieldName = "Text Field",
			customFieldType = "Input Field",
			customInputDataType = "Text",
			resourceName = "Document");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.addCP(
			customFieldText = "This is my document",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_2.jpg",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	@description = "This ensures that the latest version of an image in a depot can be published in local staging site."
	@priority = "5"
	test PublishImageWithLatestVersion {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "Edit DM Document Description",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.editCP(
			dmDocumentDescription = "Edit DM Document Description",
			dmDocumentDescriptionEdit = "This is an edit DM Document Description",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Document_2.jpg",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		MouseOver(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Click(locator1 = "Icon#EDIT_PENCIL");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEW_VERSION_NUMBER",
			value1 = "1.2");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "This is an edit DM Document Description");
	}

	@description = "This ensures that the thumbnail of a video shortcut in depot can be published through AP when enabling local staging."
	@priority = "3"
	test PublishVideoShortcutThumbnail {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video Name",
			videoURL = "https://www.youtube.com/watch?v=2ewB-7_VMGU");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Test YouTube Video Name",
			assetType = "External Video Shortcut",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_thumbnailName = "https://i.ytimg.com",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_thumbnailName = "https://i.ytimg.com",
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_EXTERNAL_VIDEO_THUMBNAIL");
	}

	@description = "This ensures that the blog small image from a depot can be removed and republished when enabling local staging."
	@priority = "5"
	test RemoveBlogSmallImage {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addSmallImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		PortletEntry.publish();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.removeSmallImage(uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_imageFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");
	}

	@description = "This ensures that an unavailable structure from a depot can not be viewed in the staged site when enabling local staging."
	@priority = "5"
	test SelectUnavailableStructure {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_menuItem = "DM Document Type Depot",
			locator1 = "MenuItem#ANY_MENU_ITEM");
	}

	@description = "This ensures that a depot image can be displayed in the Blog's item selector after scoped everywhere filter when enabling local staging."
	@priority = "5"
	test ViewImageAfterScopedFilter {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		BlogsNavigator.gotoAddEntry();

		Pause(locator1 = "3000");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.viewEverywhereFilterResults(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");
	}

	@description = "This test covers LPS-122133. It ensures that a depot image cannot be found from the disconnected local staging site."
	@priority = "4"
	test ViewImageFromDisconnectedSite {
		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			depotName = "Test Depot Name",
			noConnectedDepot = "true");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		AssertElementNotPresent(
			key_card = "Document_2.jpg",
			locator1 = "Card#CARD_TITLE");
	}

	@description = "This ensures that a pending image in depot cannot be found in staging site when enabling local staging."
	@priority = "5"
	test ViewPendingImage {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.configureWorkflowCP(
			dmFolderName = "DM Folder Name",
			workflowDefinition = "Single Approver",
			workflowRestriction = "Default Workflow");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.addWithWorkflowCP(
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		AssertElementPresent(
			key_card = "DM Folder Name",
			locator1 = "Card#CARD_TITLE");

		AssertElementNotPresent(
			key_card = "Document_1.jpg",
			locator1 = "Card#CARD_TITLE");
	}

}