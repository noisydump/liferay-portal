@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that the user can perform CRUD operations with an AL role that has all WC permissions."
	@priority = "5"
	test AssignALRoleWithAllWCPermissions {
		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		for (var resourceActionIndex : list "ADD_ARTICLE,ADD_FEED,ADD_FOLDER,ADD_STRUCTURE,ADD_TEMPLATE,PERMISSIONS,SUBSCRIBE,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		for (var resourceActionIndex : list "ADD_DISCUSSION,DELETE,DELETE_DISCUSSION,EXPIRE,PERMISSIONS,SUBSCRIBE,UPDATE,UPDATE_DISCUSSION,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			category = "People",
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleTitle = "AL Role Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ProductMenu.gotoSite(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-depot-name");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This ensures that the user can edit documents with an AL role that has edit documents permissions."
	@priority = "5"
	test AssignALRoleWithDMEditPermissions {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		for (var resourceActionIndex : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			category = "People",
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleTitle = "AL Role Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ProductMenu.gotoSite(depotName = "Test Depot Name");

		AssertElementNotPresent(locator1 = "Button#PLUS");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This ensures that an asset library role can be deleted."
	@priority = "5"
	test DeleteALRole {
		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENT_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.deleteCP(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.viewDefaultCP(roleTitle = "AL Role Name");
	}

	@description = "This ensures that an asset library role can be edited."
	@priority = "5"
	test EditALRole {
		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENT_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		Role.viewCP(
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_DOCUMENT_CHECKBOX",
			permissionDefinitionValue = "Add Document",
			roleTitle = "AL Role Name",
			roleTitleEdit = "AL Role Name Edit",
			roleType = "Asset Library");
	}

}