@component-name = "portal-collaboration"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
	property databases.size = "1";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Documents Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Staging.remoteStagingSetUp(
			remotePort = "9080",
			remoteStaging = "true",
			siteName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONGroup.deleteGroupByName(groupName = "Remote Site");

			User.logoutPG();
		}
	}

	@description = "This ensures that the document using custom document type can be deleted and republished."
	@ignore = "true"
	@priority = "5"
	test DeleteDocumentWithCustomType {

		// TODO LPS-127173 DeleteDocumentWithCustomType pending implementation

	}

	@description = "This ensures that the document using custom document type can be edited and republished."
	@ignore = "true"
	@priority = "5"
	test EditDocumentWithCustomType {

		// TODO LPS-127173 EditDocumentWithCustomType pending implementation
	}

	@description = "This ensures that the custom document type being used by document can be edited and republished."
	@ignore = "true"
	@priority = "5"
	test PublishEditsToDocumentType {

		// TODO LPS-127173 PublishEditsToDocumentType pending implementation
	}

	@description = "This ensures that the document using custom document type and custom metadataset can be edited and republished."
	@ignore = "true"
	@priority = "5"
	test PublishEditsToDocumentUsingCustomTypeAndSet {

		// TODO LPS-127173 PublishEditsToDocumentUsingCustomTypeAndSet pending implementation
	}

	@description = "This ensures that the custom metadataset used in custom document type can be edited and republished."
	@ignore = "true"
	@priority = "5"
	test PublishEditsToMetadataSet {

		// TODO LPS-127173 PublishEditsToMetadataSet pending implementation
	}

	@description = "This is a use case for LPS-89175."
	@priority = "3"
	test StagingRemoteLiveDeleteDocumentWithWebContentField {
		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Web Content",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.addDocumentTypePG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			webcontentField = "WC WebContent Title");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Pause(locator1 = "5000");

		AssertConsoleTextNotPresent(value1 = "RuntimeException");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPG(
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");
	}

	@description = "This ensures that the document info is displayed correctly after publishing and republishing."
	@ignore = "true"
	@priority = "5"
	test ViewRepublishedDocumentInfo {

		// TODO LPS-127173 ViewRepublishedDocumentInfo pending implementation
	}

	@description = "This ensures that the image can be deleted and republished in web content."
	@ignore = "true"
	@priority = "4"
	test ViewWebContentWithDeletedImage {

		// TODO LPS-127173 ViewWebContentWithDeletedImage pending implementation
	}

	@description = "This ensures that the image can be edited and republished in web content."
	@ignore = "true"
	@priority = "4"
	test ViewWebContentWithRepublishedImage {

		// TODO LPS-127173 ViewWebContentWithRepublishedImage pending implementation
	}

}