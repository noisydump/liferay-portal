@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to image fragment."
	@priority = "4"
	test MapManualURLToImageFragment {
		task ("Add an Image fragment to the Display Page Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map manual URL to editable field of Image") {
			PageEditor.editFragmentImage(
				fileName = "Document_1.jpg",
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.updateURL(url = "https://liferay.com");

			AssertVisible(
				key_append = "/img[contains(@src,'Document_1.jpg')]",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Assert mapped URL work in display page template") {
			AssertVisible(
				key_append = "/img[contains(@src,'Document_1.jpg')]",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "/img[contains(@src,'Document_1.jpg')]",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031."
	@priority = "5"
	test MapManualURLToLinkFragment {
		property portal.acceptance = "true";

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.updateURL(url = "https://liferay.com");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Name",
			item = "Edit");

		task ("Assert editable has the specified URL mapped correctly") {
			AssertVisible(locator1 = "//a[contains(@class,'btn')][contains(@href,'https://liferay.com')]");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to text fragment."
	@priority = "4"
	test MapManualURLToTextFragment {
		task ("Add a Heading fragment to the Display Page Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map manual URL to editable field of Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.updateURL(url = "https://liferay.com");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Assert mapped URL work in view mode") {
			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to image editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToImageFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add an Image fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map link from Text field to Image") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.mapURLToAsset(field = "Text");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped URL work in view mode") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to link editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToLinkFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Button fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map link from Text field to Button") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Text");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped URL work in view mode") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to text editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToTextFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Heading fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map link from Text field to Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(field = "Text");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped URL work in view mode") {
			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98030. Can map the editable background images of a fragment to an existing image content in a display page template."
	@priority = "2"
	test MapWebContentImageToBackgoundImageOfBannerCenter {
		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Banner Center fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");
		}

		task ("Map web content image to background image field of Banner Center") {
			PageEditorMapping.mapEditableTextToField(
				field = "Image",
				fragmentName = "Banner Center",
				id = "banner-center");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped image is shown in display page template") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a display page template."
	@priority = "2"
	test MapWebContentImageToBackgroundImageOfContainer {
		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Container fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Map web content image to background image field of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Image",
				panel = "Styles");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped image is shown in display page template") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-118979. The mappable fields are grouped by fieldset in display page template."
	@priority = "4"
	test ViewMappableFieldsAreGroupedByFieldset {
		task ("Add a custom Document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a Heading fragment to the Display Page Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertElementPresent(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Basic Web Content (Default)");

			for (var field : list "Title,Description,Publish Date,Author Name,Last Editor Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Content (Basic Web Content)",
				key_value = "Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Templates",
				key_value = "Basic Web Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Display Page",
				key_value = "Display Page URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Date,Expiration Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Schedule",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Add a display page template based on Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name 2",
				groupName = "Test Site Name");
		}

		task ("Add a Heading fragment to the Display Page Name 2") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 2");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertElementPresent(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Blogs Entry (Default)");

			for (var field : list "Title,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Subtitle,Cover Image Caption,Content") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Content",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Page URL,Description,Display Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Configuration",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Add a display page template based on Document and new document type") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Document",
				displayPageName = "Display Page Name 3",
				subType = "DM Document Type Name");
		}

		task ("Add a Heading fragment to the Display Page Name 3") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertElementPresent(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Basic Document (Default)");

			for (var field : list "Title,Description,Version,Publish Date,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "File Name,Download URL,MIME Type,Size") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "File Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "DM Document Type Name",
				key_value = "Text",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}
	}

	@description = "This is a test for LPS-120504. View mapped image after sort documents in display page template."
	@priority = "4"
	test ViewMappedImageAfterSortDocumentsInDisplayPageTemplate {
		task ("Add a display page template based on Document and Basic Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Document Display Page",
				groupName = "Test Site Name",
				subType = "Basic Document");
		}

		task ("Add an Image fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Document Display Page",
				item = "Edit");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map File URL of document to editable field of Image") {
			PageEditorMapping.mapEditableTextToField(
				field = "File URL",
				fragmentName = "Image",
				id = "image-square",
				source = "Basic Document (Default)");
		}

		task ("Add a Documents and Media widget below the Image") {
			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Image");
		}

		task ("Mark the display page template as default") {
			PageEditor.clickPublish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Document Display Page");
		}

		task ("Add an Asset Publisher to a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Add the first document with an image") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.jpg",
				dmDocumentTitle = "Document Title 1");
		}

		task ("Add the second document with an image") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_2.jpg",
				dmDocumentTitle = "Document Title 2");
		}

		task ("Navigate to display page template related to the first document via Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var title : list "Document Title 1,Document Title 2") {
				AssertTextEquals(
					key_assetTitle = "${title}",
					locator1 = "AP#ASSET_ABSTRACT_TITLE",
					value1 = "${title}");
			}

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Document Title 1");
		}

		task ("Assert the image of the Document Title 1 is shown in Image fragment") {
			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}

		task ("Assert the order of documents in Documents and Media") {
			var n = "1";

			for (var title : list "Document Title 2,Document Title 1") {
				LexiconCard.viewCardOrder(
					card = "${title}",
					index = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Reverse Sort Direction in Documents and Media") {
			Click(locator1 = "ManagementBar#ORDER_ICON_GENERIC");
		}

		task ("Assert the order of documents in Documents and Media") {
			var n = "1";

			for (var title : list "Document Title 1,Document Title 2") {
				LexiconCard.viewCardOrder(
					card = "${title}",
					index = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the image of the Document Title 1 is still shown in Image fragment") {
			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
	}

	@description = "This is a test for LPS-118060. The contributed content types and their subtypes are available when creating a display page template."
	@priority = "5"
	test ViewTypesDuringCreation {
		property osgi.app.includes = "document-library-google-docs";

		task ("Add a custom Web Content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("View all contributed content types and their subtypes when creating a display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			LexiconCard.clickCard(card = "Blank");

			PortletEntry.inputName(name = "Display Page Template Name");

			for (var contentType : list "Web Content Article,Document,Blogs Entry") {
				AssertElementPresent(
					key_fieldLabel = "Content Type",
					key_value = "${contentType}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			AssertElementNotPresent(
				key_fieldLabel = "Content Type",
				key_value = "Asset",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			Select(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Web Content Article");

			Pause(locator1 = "3000");

			for (var subtype : list "Basic Web Content,WC Structure Name") {
				AssertElementPresent(
					key_fieldLabel = "Subtype",
					key_value = "${subtype}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			Select(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Document");

			Pause(locator1 = "3000");

			for (var subtype : list "Basic Document,Google Drive Shortcut,DM Document Type Name") {
				AssertElementPresent(
					key_fieldLabel = "Subtype",
					key_value = "${subtype}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}
		}
	}

}