@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Documents Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-82073."
	@priority = "5"
	test AddShortcutToSiteDocument {
		property testray.component.names = "Training";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addDMShortcutCP(
			dmDocumentTitle = "DM Document Title",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This test covers LPS-88313 and LPS-92145. It ensures that a user can check in a document without changing versions."
	@priority = "5"
	test CheckInDocumentAsCurrentVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editCP(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Check in as current version",
			revision = "Current",
			versioning = "true",
			versionNotes = '''<!DOCTYPE html> <html class="ltr" dir="ltr" lang="en-US"> <head> <title>''');

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test ensures that a user can check in a document as a major version."
	@priority = "5"
	test CheckInDocumentAsMajorVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as major version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as major version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as major version",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as major version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as major version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a user can check in a document as a minor version."
	@priority = "5"
	test CheckInDocumentAsMinorVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as minor version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as minor version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as minor version",
			revision = "Minor");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as minor version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as minor version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-82306. It ensures that a user can check in a document through Management bar and allow to select the change version."
	@priority = "4"
	test CheckInDocumentAtManagementBar {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.checkinManagementBar(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test asserts that major version increment will occur even if only metadata was changed if version increment was selected manually."
	@priority = "4"
	test CustomizeVersionNumberMajor {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit",
			revision = "Major",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test asserts that minor version increment will occur even if the actual file was changed if version increment was selected manually."
	@priority = "4"
	test CustomizeVersionNumberMinor {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.doc",
			dmDocumentTitle = "DM Document Title",
			revision = "Minor",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This case covers LPS-110213. It ensures that a document file can be downloaded after moving it between folders."
	@priority = "5"
	test DownloadDocumentAfterMoveBetweenFolders {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder 1 Description",
			dmFolderName = "DM Folder 1 Name");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder 2 Description",
			dmFolderName = "DM Folder 2 Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder 1 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 1 Name");

		DMDocument.moveToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder 2 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 2 Name");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");
	}

	@description = "This ensures that the document file can be downloaded through the document file name."
	@priority = "5"
	test DownloadDocumentThroughFileName {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.mp4,Document_2.mp3,Document_3.doc");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1.mp4");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_1.mp4");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_2",
			dmDocumentTitleEdit = "Document_2Edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_2.mp3");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_2.mp3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileName = "Document_3.doc",
			dmDocumentFileNameEdit = "Document_3Edit.doc",
			dmDocumentTitle = "Document_3");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_3Edit.doc");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_3Edit.doc");
	}

	@description = "This ensures that the document file can be downloaded through the document title."
	@priority = "5"
	test DownloadDocumentThroughTitle {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.ppt,Document_3.txt");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_2",
			dmDocumentTitleEdit = "Document_2Edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_2Edit");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_2.ppt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileName = "Document_3.txt",
			dmDocumentFileNameEdit = "Document_3Edit.txt",
			dmDocumentTitle = "Document_3");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_3");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_3Edit.txt");
	}

	@description = "This ensures that the document file name will be applied to the downloaded file name."
	@priority = "5"
	test DownloadDocumentWithCustomFileName {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentFileName = "document_1_Edit.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "document_1_Edit.jpg");
	}

	@description = "This test edits the title and description of a document. It asserts minor version increment because only its metadata was updated."
	@priority = "5"
	test EditDocument {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_1.txt",
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileName = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1_Edit.txt",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentFileName = "Document_1_Edit.txt",
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@priority = "5"
	test EditFolder {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.viewCP(dmFolderName = "DM Folder Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.editCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderDescriptionEdit = "DM Folder Description Edit",
			dmFolderName = "DM Folder Name",
			dmFolderNameEdit = "DM Folder Name Name");

		DMFolder.viewCP(dmFolderName = "DM Folder Name Name");
	}

	@description = "This ensures that the user can edit the shortcut."
	@priority = "4"
	test EditShortcutDestination {
		JSONGroup.addGroup(groupName = "Site Name");

		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${entryCount}.jpg",
				groupName = "Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${entryCount}.jpg");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addDMShortcutCP(
			dmDocumentTitle = "Document_1.jpg",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editDMShortcutCP(
			dmDocumentTitle = "Document_1.jpg",
			dmNewDocumentTitle = "Document_2.jpg",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_2.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.viewCP(dmDocumentTitle = "Document_2.jpg");
	}

	@description = "This test covers LPS-94820. This test ensures that only the last two checked in versions of a file are kept when the max version limit is set."
	@priority = "4"
	test LimitCheckInMaxFileVersion {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#LimitCheckInMaxFileVersion";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Service",
			configurationScope = "System Scope");

		Type(
			key_fieldLabel = "Maximum Number Of Versions",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "2");

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Check in this document three times",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Check in this document three times");

		for (var versionNumber : list "3.0,4.0") {
			AssertElementPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}

		for (var versionNumber : list "1.0,2.0") {
			AssertElementNotPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}
	}

	@description = "This test ensures that only the last two versions of a file are kept when the max version limit is set."
	@priority = "5"
	test LimitMaxFileVersion {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#LimitMaxFileVersion";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Service",
			configurationScope = "System Scope");

		Type(
			key_fieldLabel = "Maximum Number Of Versions",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "2");

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Edit this document two times",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Edit this document two times",
			dmDocumentTitleEdit = "First edit");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "First edit",
			dmDocumentTitleEdit = "Second edit");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Second edit");

		for (var versionNumber : list "1.2,1.1") {
			AssertElementPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}

		AssertElementNotPresent(
			key_dmDocumentVersionNumber = "1.0",
			locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
	}

	@description = "This case covers the folder name of a document can be viewed in the info panel and navigate to it."
	@priority = "5"
	test MoveDocumentToFolder {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "Home",
			locationFieldName = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.viewCP(dmFolderName = "DM Folder Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.moveToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name");

		DMDocument.viewMovedToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name",
			locationFieldName = "true");
	}

	@priority = "4"
	test MoveFolderToFolder {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder1 Description",
			dmFolderName = "DM Folder1 Name");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder2 Description",
			dmFolderName = "DM Folder2 Name");

		DMFolder.moveToFolderCP(
			dmFolderName = "DM Folder2 Name",
			dmFolderName1 = "DM Folder1 Name",
			dmFolderName2 = "DM Folder2 Name");
	}

	@priority = "5"
	test MoveToRecycleBinDocument {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.moveToRecycleBinCP(
			assetType = "Document",
			dmDocumentTitle = "DM Document Title");
	}

	@priority = "5"
	test MoveToRecycleBinFolder {
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.viewCP(dmFolderName = "DM Folder Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.moveToRecycleBinCP(
			assetType = "Documents Folder",
			dmFolderName = "DM Folder Name");
	}

	@description = "This ensures that the document file can be accessed through the original URL."
	@priority = "5"
	test PreviewDocumentThroughURL {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpg,Document_2.pdf,Document_3.png");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1");

		var key_imageSourceURL = "${portalURL}/documents/${siteID}/0/Document_1";

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_2",
			dmDocumentTitleEdit = "Document_2Edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_2.pdf");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		AssertHTMLSourceTextPresent(value1 = "application/pdf");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileName = "Document_3.png",
			dmDocumentFileNameEdit = "Document_3Edit.png",
			dmDocumentTitle = "Document_3");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_3");

		var key_imageSourceURL = "${portalURL}/documents/${siteID}/0/Document_3";

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This ensures that the empty state displays when the preview file doesn't have anything previewable."
	@priority = "4"
	test PreviewEmptyState {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.doc");

		for (var emptyStateInfo : list "No preview available,Hmm... looks like this item doesn't have a preview we can show you.") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_EMPTY_STATE_PREVIEW",
				value1 = "${emptyStateInfo}");
		}
	}

	@description = "This is a test for LPS-91751. It ensures that a user cannot preview a file with size that exceeds the preview limit."
	@priority = "4"
	test PreviewFileThatExceedsLimit {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#PreviewFileThatExceedsLimit";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "File Entries",
			configurationScope = "System Scope");

		Type(
			key_fieldLabel = "Previewable Processor Maximum Size",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1024");

		SystemSettings.saveConfiguration();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "high_resolution_photo.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		AssertVisible(
			key_title = "File too big to preview",
			locator1 = "Header#H3_TITLE");
	}

	@description = "This test covers LPS-104957. It ensures that the JPG file can be previewed."
	@priority = "5"
	test PreviewJPG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "It ensures that the MP4 file can be previewed."
	@priority = "4"
	test PreviewMP4 {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#PreviewMP4";

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(installXuggler = "true");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(enableXuggler = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.mp4",
			groupName = "Guest",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.mp4");

		Pause(locator1 = "5000");

		DMDocument.viewInternalVideoPreview(videoName = "Document_1.mp4");
	}

	@description = "This is a use case for LPS-88785."
	@priority = "5"
	test PreviewPDF {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "large_file.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "large_file.pdf");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "large_file.pdf");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#INFO",
			value1 = "Generating preview will take a few minutes.");

		Pause(locator1 = "60000");

		Refresh();

		AssertVisible(
			key_dmDocumentFileName = "large_file.pdf",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This test covers LPS-104957. It ensures that the PNG file can be previewed."
	@priority = "5"
	test PreviewPNG {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.png",
			groupName = "Guest",
			mimeType = "image/png",
			sourceFileName = "Document_1.png");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.png");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.png",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This ensures that the SVG file can be previewed."
	@priority = "5"
	test PreviewSVG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.svg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.svg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@priority = "4"
	test SearchForDocumentInHomeFolder {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "DM Document Title");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that the user can search for document file name using partial text."
	@priority = "5"
	test SearchForDocumentWithPartialText {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "DM");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This test covers LPS-91598. It makes sure that all files are deleted when user selects all."
	@priority = "4"
	test SelectAllAndDelete {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls,Document_4.txt,Commerce_Black.jpg,Commerce_Blue.jpg,Commerce_White.jpg,Spaceport.jpg,analytics-cloud-hero-image.png,marketplace_icon.png");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 10 entries.");

		PortletEntry.selectAll();

		AssertClick(
			locator1 = "Button#SELECT_ALL",
			value1 = "Select All");

		Click(locator1 = "Icon#DELETE");

		Alert.viewSuccessMessage();

		DMDocument.viewDefaultCP();
	}

	@description = "This ensures that the document title can be displayed correctly in the different views."
	@priority = "5"
	test ViewDocumentInDifferentViews {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_2.docx,Document_3.docx");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		LexiconCard.viewCardTitle(card = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		LexiconTable.viewTableEntryTitle(tableEntry = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		LexiconList.viewListEntryTitleLink(listEntry = "Document_2");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_2.docx",
			dmDocumentTitle = "Document_2");
	}

	@description = "This ensures that the user can create a document with edited display page template."
	@priority = "4"
	test ViewDocumentWithEditedDisplayPageTemplate {
		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Template Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Template Name",
			item = "Edit");

		PageEditor.removeFragment(fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Display Page Content");

		Button.clickPublish();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		var dmFileEntryID = DMDocument.getFileEntryID(dmDocumentTitle = "Document_1.jpg");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Document_1.jpg");

		WebContent.editDisplayPage(pageName = "Display Page Template Name");

		PortletEntry.publish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryID}");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#ENTRY_COVER_IMAGE");
	}

	@description = "This ensures that the shortcut is deleted after deleting the shortcut target."
	@priority = "4"
	test ViewShortcutAfterDeletingTarget {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addDMShortcutCP(
			dmDocumentTitle = "Document_1.jpg",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewDefaultCP();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewDefaultCP();
	}

	@description = "This ensures that the shortcut target is not deleted after deleting the shortcut."
	@priority = "4"
	test ViewTargetAfterDeletingShortcut {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addDMShortcutCP(
			dmDocumentTitle = "Document_1.jpg",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.deleteCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewDefaultCP();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");
	}

}