@component-name = "portal-wcm"
definition {

	property osgi.module.configuration.file.names = "com.liferay.layout.page.template.admin.web.internal.configuration.ExportImportMasterLayoutConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Layout Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-102207. Can not export a master page template when it doesn't has published version."
	@priority = "5"
	test CannotExportMastersPageTemplateWithoutPublishedVersion {
		task ("Add a custom master but not publish") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Custom Masters Page Template");

			Button.clickSave();

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Assert custom master has a Draft label") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			LexiconCard.viewCardLabel(
				card = "Custom Masters Page Template",
				cardLabel = "Draft");
		}

		task ("Assert Export action is disabled") {
			Click.waitForMenuToggleJSClick(
				key_card = "Custom Masters Page Template",
				locator1 = "LexiconCard#CARD_ELLIPSIS");

			AssertVisible(
				key_menuItem = "Export",
				locator1 = "MenuItem#DISABLED_MENU_ITEM");
		}

		task ("Assert Export button is disabled") {
			MastersPageTemplatesAdmin.selectMasters(masterLayoutName = "Custom Masters Page Template");

			AssertElementPresent(locator1 = "Icon#EXPORT_DISABLED");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the layout elements and nested elements and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithCompositionOfFragments {
		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Add composition of fragments to custom master") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addLayoutSection(dropTarget = "//div[contains(@class,'page-editor__drop-zone')]");

			Click(
				key_elementType = "Section",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_fragmentName = "Heading",
				key_position = "1",
				locator1 = "PageEditor#SECTION_BUILDER_FRAGMENTS",
				locator2 = "PageEditor#SECTION_CONTAINER",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Heading')]",
				key_position = "1",
				locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");

			PageEditor.addLayoutRow(
				dropTarget = "Footer",
				scope = "Master");

			PageEditor.gotoTab(tabName = "Fragments");

			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_columnNumber = "1",
				key_fragmentName = "Button",
				key_position = "1",
				locator1 = "PageEditor#SECTION_BUILDER_FRAGMENTS",
				locator2 = "PageEditor#ROW_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Button')]",
				key_position = "1",
				locator1 = "PageEditor#ROW_COLUMN_NESTED_ELEMENT");

			Button.click(button = "Publish Master");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the composition of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			AssertElementPresent(
				key_elementType = "Section",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Heading')]",
				key_position = "1",
				locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");

			AssertElementPresent(
				key_elementType = "Row",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Button')]",
				key_position = "1",
				locator1 = "PageEditor#ROW_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the custom configuration settings of fragments and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithCustomConfigurationSettingOfFragments {
		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Add a Section and a Heading to custom master and set up configuration settings of them") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addLayoutSection(dropTarget = "//div[contains(@class,'page-editor__drop-zone')]");

			PageEditor.editLayoutSection(
				backgroundImage = "Manual Selection",
				uploadFileName = "Document_1.png");

			PageEditor.viewSectionStyle(
				backgroundImage = "Document_1.png",
				position = "1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(
				headingLevel = "H2",
				marginBottom = "1",
				textAlign = "Center",
				textColor = "danger");

			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				marginBottom = "1",
				textColor = "danger");

			Button.click(button = "Publish Master");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the custom configuration settings of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.viewSectionStyle(
				backgroundImage = "Document_1.png",
				position = "1");

			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				marginBottom = "1",
				textColor = "danger");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the edited inline content of fragments and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithEditedInlineContentOfFragments {
		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Add fragments to custom master and edit inline content") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Modified Text");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "HTML",
				scope = "Master");

			PageEditor.editFragmentHTML(
				editableId = "element-html",
				fileName = "fragment_static_text.html",
				fragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Footer",
				fragmentName = "Image",
				scope = "Master");

			PageEditor.editFragmentImage(
				fileName = "Document_1.png",
				fragmentName = "Image",
				id = "image",
				imageDescription = "This is Document 1 png");

			PageEditor.viewFragmentEditableText(
				editableText = "Modified Text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "This is static text.",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.viewFragmentEditableImage(
				id = "image",
				imageDescription = "This is Document 1 png",
				imageFileName = "Document_1.png");

			Button.click(button = "Publish Master");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the edited inline content of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			for (var fragmentName : list "Heading,HTML,Image") {
				AssertElementPresent(
					key_fragmentName = "${fragmentName}",
					locator1 = "Fragment#FRAGMENT_HEADER");
			}

			PageEditor.viewFragmentEditableText(
				editableText = "Modified Text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "This is static text.",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.viewFragmentEditableImage(
				id = "image",
				imageDescription = "This is Document 1 png",
				imageFileName = "Document_1.png");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template with the thumbnail and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithThumbnail {
		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Change thumbnail of custom master") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Change Thumbnail",
				masterLayoutName = "Custom Masters Page Template");

			ItemSelector.uploadFile(uploadFileName = "Document_1.png");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");

			SelectFrameTop(value1 = "relative=top");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the thumbnail of custom master is imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-102207. The existing entry will be overwriten when import a master page template with thumbnail if check Overwrite Existing Entries."
	@priority = "4"
	test OverwriteExistingEntryWithThumbnailIfCheckOverwriteExistingEntries {
		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Change thumbnail of custom master") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Change Thumbnail",
				masterLayoutName = "Custom Masters Page Template");

			ItemSelector.uploadFile(uploadFileName = "Document_1.png");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");

			SelectFrameTop(value1 = "relative=top");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in the current site") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#DIALOG");

			var mastersZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "master-page-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${mastersZipFileName}");

			AssertChecked(
				checkboxName = "Overwrite Existing Page Templates",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Click(locator1 = "Button#IMPORT");

			Alert.viewSuccessMessage();

			IFrame.closeFrame();
		}

		task ("Assert the thumbnail of custom master is imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-102207. The specific error message should be shown when import a master page template with invalid value in json file."
	@priority = "4"
	test ShowSpecificErrorMessageWhenImportMastersPageTemplateWithInvalidValue {
		task ("Import masters page template with invalid value") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#DIALOG");

			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "master-page-invalid-value.zip");

			Click(locator1 = "Button#IMPORT");
		}

		task ("Assert the specific error message is shown on Import popup") {
			Alert.viewErrorMessage(errorMessage = "No page template could be imported.");

			AssertElementPresent(
				key_dangerInfo = "master-page.json could not be imported because its page definition is invalid.",
				locator1 = "Message#DANGER_INFO");
		}

		task ("Assert custom master is not imported") {
			IFrame.closeFrame();

			LexiconCard.viewCardNotPresent(card = "Custom Masters Page Template");
		}
	}

}