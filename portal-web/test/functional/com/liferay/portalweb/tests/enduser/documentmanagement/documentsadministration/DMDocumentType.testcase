@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Documents Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMDocumentType.tearDownCP();

			User.logoutPG();
		}
	}

	@priority = "5"
	test AddEntryWithMetadataSet {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "Document Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Date",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "Document Metadata Set Name");

		DMDocumentType.edit(
			dmDocumentTypeFieldRequiredEdit = "Date",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Date",
			locator1 = "Icon#ASTERISK_DATE_FIELD");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dateValue = "01/01/2022",
			dmDocumentDescription = "DM Document Type Contract Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Type Contract Title",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = "123");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Contract Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Type Contract Title");
	}

	@description = "This test covers LPS-123711. It ensures that the document type cannot be published if the title is left blank."
	@priority = "4"
	test AddEntryWithNoTitle {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "Document Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Date",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "Document Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		Type(
			key_fieldName = "Numeric",
			locator1 = "TextInput#NUMERIC",
			value1 = "123");

		Type(
			key_fieldFieldLabel = "Date",
			locator1 = "WCEditWebContent#DATE_INPUT",
			value1 = "01/01/2022");

		Button.clickPublish();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "This field is required.");
	}

	@priority = "4"
	test AddMultipleEntries {
		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type 1 Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type 1 Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type 1 Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type 2 Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type 2 Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type 2 Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type 3 Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type 3 Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type 3 Name");
	}

	@priority = "4"
	test DeleteEntry {
		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.deletePG(dmDocumentTypeName = "DM Document Type Name");
	}

	@description = "This ensures that the user can delete fields within a document type ."
	@priority = "3"
	test DeleteFields {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text,Date,Image,Upload,Web Content",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		for (var fieldFieldLabel : list "Text,Date,Image,Upload,Web Content") {
			AssertElementPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.deleteFields(
			dmDocumentTypeName = "DM Document Type Name",
			fieldFieldLabel = "Text,Date,Image,Upload");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		for (var fieldFieldLabel : list "Text,Date,Image,Upload") {
			AssertElementNotPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		AssertElementPresent(
			key_fieldFieldLabel = "Web Content",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@priority = "5"
	test EditEntry {
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeDescriptionEdit = "DM Document Type Description Edit",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewMenulistOption(dmDocumentTypeName = "DM Document Type Name Edit");
	}

	@priority = "5"
	test UpdateEntryWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "DocumentsadministrationUsecase#UpdateDocumentTypeWithPermissions";
		property testray.component.names = "Training";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "Images",
			dmDocumentTypeFieldNames = "Text,Date",
			dmDocumentTypeName = "Photos");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.executeServerResourcesActions(actionsDescription = "Clean up permissions.");

		Navigator.openURL();

		JSONRole.addRegularRole(
			roleKey = "Technical Writer",
			roleTitle = "Technical Writer");

		for (var resourceActionIndex : list "DELETE,VIEW,UPDATE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntryType",
				roleTitle = "Technical Writer");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
			roleTitle = "Technical Writer");

		for (var resourceActionIndex : list "VIEW,ADD_FOLDER,ADD_DOCUMENT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library",
				roleTitle = "Site Member",
				roleType = "site");
		}

		for (var resourceActionIndex : list "UPDATE,DELETE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "Site Member",
				roleType = "site");
		}

		for (var resourceActionIndex : list "UPDATE,ADD_SUBFOLDER,ADD_DOCUMENT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library.kernel.model.DLFolder",
				roleTitle = "Site Member",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Site Member",
			roleType = "site");

		for (var resourceActionIndex : list "VIEW,ACCESS_IN_CONTROL_PANEL") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
				roleTitle = "Site Member",
				roleType = "site");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Technical Writer",
			userScreenName = "usersn");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "${siteName}",
			userScreenName = "usersn2");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages",
			site = "${siteName}");

		SitePages.addPublicPage(
			pageName = "Documents and Media Page",
			sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Documents and Media Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		AssertVisible(
			locator1 = "Portlet#HEADER",
			value1 = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNames = "Image",
			dmDocumentTypeName = "Photos",
			rowNum = "2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCannotAddRepository();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocumentType.viewNoAvailableActionsViaDocumentTypesPG();
	}

	@description = "This ensures that the user can create a document using edited image field inside document type."
	@priority = "4"
	test ViewDocumentwithEditedImageField {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Image",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			imageField = "Document_1.jpg",
			navTab = "Documents and Media");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Photo",
			dmDocumentTypeFieldRequiredEdit = "Photo",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Image",
			fieldFieldLabelEdit = "Photo");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Photo",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Photo",
			locator1 = "Icon#ASTERISK_DATE_FIELD");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name Edit",
			fieldFieldLabel = "Photo",
			imageDescription = "Photo Description",
			imageField = "Document_2.jpg",
			navTab = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(imageName = "Document_2.jpg");
	}

	@description = "This ensures that the user can create a document using edited text field inside document type."
	@priority = "4"
	test ViewDocumentwithEditedTextField {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(textContent = "DM Document Text");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Company",
			dmDocumentTypeFieldRequiredEdit = "Company",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Company");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Company",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Company",
			locator1 = "Icon#ASTERISK_DATE_FIELD");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.png",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name Edit",
			fieldFieldLabel = "Company",
			textField = "Liferay");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(
			textContent = "Liferay",
			textFieldLabel = "Company");
	}

	@description = "This ensures that the user can create a document using edited upload field inside document type."
	@priority = "4"
	test ViewDocumentwithEditedUploadField {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Upload",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			documentsAndMediaField = "Document_1.doc",
			fieldFieldLabel = "Upload",
			navTab = "Documents and Media");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Resume",
			dmDocumentTypeFieldRequiredEdit = "Resume",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Upload",
			fieldFieldLabelEdit = "Resume");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Resume",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Resume",
			locator1 = "Icon#ASTERISK_DATE_FIELD");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name Edit",
			documentsAndMediaField = "Document_1.doc",
			fieldFieldLabel = "Resume",
			navTab = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(
			uploadFieldLabel = "Resume",
			uploadFile = "Document_1.doc");
	}

}