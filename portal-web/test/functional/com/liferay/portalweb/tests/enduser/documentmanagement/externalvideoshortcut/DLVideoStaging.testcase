@component-name = "portal-document-management"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=${line.separator}xuggler.enabled=true";
	property databases.size = "1";
	property dummy.socket.proxy.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Documents Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(installXuggler = "true");

		Clustering.shutdownSpecificServer(nodePort = "8080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = "8080");

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureExternalServices(enableXuggler = "true");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			JSONGroup.deleteGroupByName(groupName = "Site Name");

			User.logoutPG();
		}
	}

	@description = "This test ensures that a blog entry can be published successfully."
	@priority = "5"
	test PublishBlogWithEmbeddedVideo {
		property test.name.skip.portal.instance = "DLVideoStaging#PublishBlogAfterEditingEmbeddedVideo";

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Blogs");

		Staging.remoteStagingSetUp(
			enableXuggler = "true",
			remotePort = "9080",
			remoteStaging = "true",
			siteName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Video Title In Site",
			groupName = "Site Name",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Blogs.addEntry(
			embedVideo = "true",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			videoName = "Document_1.mp4",
			videoShortcutTitle = "DM Video Title In Site",
			viewInternalVideoPreview = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Test Page",
			siteName = "Remote Site");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			internalVideo = "true",
			videoName = "Document_1.mp4");
	}

	@description = "This test ensures that a kb article can be published successfully after deleting the embedded video."
	@priority = "5"
	test PublishKBAfterDeletingEmbeddedVideo {
		property test.name.skip.portal.instance = "DLVideoStaging#PublishKBAfterDeletingEmbeddedVideo";

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Settings");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(portlet = "Staging");

		Depot.activateStaging(depotName = "Test Depot Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.mp4",
			dmDocumentTitle = "DM Video Title In Depot");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		KBAdmin.openKBAdmin(siteURLKey = "site-name-staging");

		KBArticle.addCP(
			depotName = "Test Depot Name",
			embedVideo = "true",
			kbArticleContent = "Knowledge Base Video Content",
			kbArticleTitle = "Knowledge Base Article Title",
			navTab = "Documents and Media",
			videoName = "Document_1.mp4",
			videoShortcutTitle = "DM Video Title In Depot",
			viewInternalVideoPreview = "true");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		KBAdmin.openKBAdmin(siteURLKey = "site-name");

		KBArticle.viewCP(
			embedVideo = "true",
			internalVideo = "true",
			kbArticleContent = "Knowledge Base Video Content",
			kbArticleTitle = "Knowledge Base Article Title",
			videoName = "Document_1.mp4");

		KBAdmin.openKBAdmin(siteURLKey = "site-name-staging");

		KBArticle.editCP(
			kbArticleContentEdit = "Knowledge Base Article Content Edit",
			kbArticleTitle = "Knowledge Base Article Title",
			kbArticleTitleEdit = "Knowledge Base Article Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		KBAdmin.openKBAdmin(siteURLKey = "site-name");

		AssertClick(
			key_kbArticleTitle = "Knowledge Base Article Title Edit",
			locator1 = "KnowledgeBase#DESCRIPTIVE_VIEW_ARTICLE_TITLE",
			value1 = "Knowledge Base Article Title Edit");

		AssertElementNotPresent(locator1 = "IFrame#EMBEDDED_VIDEO_IFRAME");

		AssertElementNotPresent(
			key_videoName = "Document_1.mp4",
			locator1 = "DocumentsAndMediaDocument#VIDEO_PREVIEW");
	}

	@description = "This test ensures that a web content can be published successfully after editing the embedded video."
	@priority = "5"
	test PublishWCAfterEditingEmbeddedVideo {
		property test.name.skip.portal.instance = "DLVideoStaging#PublishWCAfterEditingEmbeddedVideo";

		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Video Title${entryCount}",
				groupName = "Site Name",
				mimeType = "video/mp4",
				sourceFileName = "Document_${entryCount}.mp4");
		}

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.activateStagingCP(siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedVideo = "true",
			navTab = "Documents and Media",
			videoShortcutTitle = "DM Video Title1",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

		Pause(locator1 = "5000");

		DMDocument.viewInternalVideoPreview(videoName = "Document_1.mp4");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		Pause(locator1 = "5000");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		DMDocument.viewInternalVideoPreview(videoName = "Document_1.mp4");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			embedVideo = "true",
			navTab = "Documents and Media",
			videoShortcutTitle = "DM Video Title2",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		Pause(locator1 = "5000");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		DMDocument.viewInternalVideoPreview(videoName = "Document_2.mp4");
	}

}